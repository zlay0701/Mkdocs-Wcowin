{"config":{"lang":["zh","en"],"separator":"[\\s\\u200b\\-\\u3000\\u3001\\u3002\\uFF0C\\uFF0E\\uFF1F\\uFF01\\uFF1B]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":"\u6700\u597d\u7684MkDocs\u535a\u5ba2\u6559\u7a0b <ul> <li> <p> \u5bfc\u822a\u680f</p> <p></p> <ul> <li> \u7b80\u6d01\u7f8e\u89c2 \uff0c\u529f\u80fd\u591a\u5143\u5316\uff0c\u5c0f\u767d\u914d\u7f6e</li> <li> \u57fa\u4e8eMaterial for MkDocs\u7f8e\u5316</li> <li> \u5982\u9047\u9875\u9762\u5361\u987f\uff0c\u8bf7\u4f7f\u7528\u79d1\u5b66\u4e0a\u7f51</li> <li> \ud835\udd59\ud835\udd52\ud835\udd67\ud835\udd56 \ud835\udd52 \ud835\udd58\ud835\udd60\ud835\udd60\ud835\udd55 \ud835\udd65\ud835\udd5a\ud835\udd5e\ud835\udd56 !  </li> </ul> Mac/PC\u7aef\u79fb\u52a8\u7aef <p>\u8bf7\u5728\u4e0a\u65b9\u6807\u7b7e\u9009\u62e9\u5206\u7c7b/\u5de6\u4fa7\u76ee\u5f55\u9009\u62e9\u6587\u7ae0</p> <p>\u8bf7\u70b9\u51fb\u5de6\u4e0a\u89d2\u56fe\u6807\u9009\u62e9\u5206\u7c7b\u548c\u6587\u7ae0</p> </li> </ul> <p>\u4e0d\u540c\u4e8e\u5e02\u9762\u4e0a\u8fc7\u65f6\u7684MkDocs\u6559\u7a0b\uff0c\u672c\u7ad9\u63d0\u4f9b\u4e86\u6700\u8be6\u7ec6\u6700\u4fbf\u6377\u6700\u524d\u6cbf\u7684MkDocs\u4e2d\u6587\u6587\u5b57/\u89c6\u9891\u6559\u7a0b\uff0c\u4e0e\u5b98\u65b9\u53d1\u5e03\u7684\u6559\u7a0b\u7248\u672c\u540c\u6b65\u3002\u5305\u542b\u4e86MkDocs\u7684\u5b89\u88c5\u3001\u914d\u7f6e\u3001\u4e3b\u9898\u7f8e\u5316\u3001\u63d2\u4ef6\u4f7f\u7528\u7b49\u5185\u5bb9\u3002\u65e0\u8bba\u4f60\u662f\u521d\u5b66\u8005\u8fd8\u662f\u6709\u7ecf\u9a8c\u7684\u7528\u6237\uff0c\u90fd\u80fd\u5728\u8fd9\u91cc\u627e\u5230\u4f60\u9700\u8981\u7684\u5e2e\u52a9\u3002\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u793a\u4f8b\u548c\u5b9e\u7528\u7684\u6280\u5de7\uff0c\u5e2e\u52a9\u4f60\u66f4\u597d\u5730\u4f7f\u7528MkDocs\u3002\ud835\udcf3\ud835\udcfe\ud835\udcfc\ud835\udcfd \ud835\udcee\ud835\udcf7\ud835\udcf3\ud835\udcf8\ud835\udd02 \ud835\udcf2\ud835\udcfd\uff5e</p> <ul> <li> <p> Mkdocs\u6559\u7a0b(\u5fc5\u770b)</p> <ul> <li>Mkdocs\u89c6\u9891\u6559\u7a0b(Bilibili)</li> <li>HelloWorld</li> </ul> </li> <li> <p> \u5173\u4e8e</p> <ul> <li>Mkdocs-Wcowin\u535a\u5ba2\u4e3b\u9898\u793e\u533a</li> <li>\u7559\u8a00\u677f<sup>1</sup> </li> <li>Blogger </li> <li> \u4e86\u89e3\u6211<sup>2</sup> </li> <li>\u8bf7\u4f5c\u8005\u559d\u676f\u5496\u5561</li> </ul> </li> </ul> <p> <p></p> <ol> <li> <p>\u592a\u9633\u603b\u662f\u80fd\u6e29\u6696\u5411\u65e5\u8475\u00a0\u21a9</p> </li> <li> <p>All-problems-in-computer-science-can-be-solved-by-another-level-of-indirection\u00a0\u21a9</p> </li> </ol>"},{"location":"archives/","title":"\u5f52\u6863","text":"\u5e74\u4efd \u6587\u7ae0\u603b\u6570 2025\u5e74 2 2021\u5e74 1"},{"location":"categories.bak/","title":"\u5206\u7c7b","text":"<ul> <li> <p> Tips</p> <p>\u4ee5\u4e0b\u662f\u7f51\u7ad9\u6587\u7ae0\u7684\u5206\u7c7b\uff0c\u70b9\u51fb\u53ef\u8df3\u8f6c\u5230\u5bf9\u5e94\u5206\u7c7b\u4e0b\u7684\u6587\u7ae0</p> </li> </ul>"},{"location":"categories/","title":"\u6587\u7ae0\u5206\u7c7b","text":"\u5206\u7c7b \u6587\u7ae0\u603b\u6570 Hello World 1 Hexo 2 Hugo 1 VuePress 1 \u4e2d\u6587\u5206\u7c7b1 1 \u4e2d\u6587\u5206\u7c7b2 1 \u4e2d\u6587\u6807\u7b7e1 1 \u4e2d\u6587\u6807\u7b7e2 1"},{"location":"link/","title":"\u53cb\u94fe","text":""},{"location":"link/#_1","title":"\u6b22\u8fce\u52a0\u5165\u53cb\u94fe(\u4e0d\u5206\u5148\u540e)","text":"Wcowin's Blog         \u201c\u5faa\u6b64\u82e6\u65c5\uff0c\u4ee5\u8fbe\u661f\u8fb0\u201d        MkDocs AI Summary         AI\u9a71\u52a8\u7684\u6458\u8981\u751f\u6210        MkDocs Reading Time         \u4e3aMkDocs\u6587\u6863\u6dfb\u52a0\u51c6\u786e\u9605\u8bfb\u65f6\u95f4\u7edf\u8ba1\u529f\u80fd"},{"location":"link/#_2","title":"\u5931\u8054\u4eba\u5458","text":"\u90dd\u5b87\u535a\u5ba2         \u8bb0\u5f55\u6211\u7684\u6210\u957f\u548c\u9752\u6625        \u4ea4\u6362\u53cb\u94fe\uff0c\u8bf7\u6dfb\u52a0\u672c\u7ad9\u53cb\u94fe\u540e\u4e0b\u65b9\u7559\u8a00\u7533\u8bf7\uff0c\u671f\u671b\u60a8\u7684\u7ad9\u70b9: <ul> <li>\u72ec\u7acb\u535a\u5ba2(\u4e0d\u8981\u6c42\u72ec\u7acb\u57df\u540d)\uff0chttps\uff0c\u8bbf\u95ee\u6d41\u7545</li> <li>\u539f\u521b\u5185\u5bb9\u4e3a\u4e3b\uff0c\u539f\u521b\u5185\u5bb93\u7bc7\u4ee5\u4e0a</li> <li>\u5904\u4e8e\u6d3b\u8dc3\u72b6\u6001\uff0c\u6709\u4e00\u5b9a\u7684\u66f4\u65b0\u9891\u7387</li> <li>\u5efa\u7ad9\u4e00\u4e2a\u6708\u4ee5\u4e0a</li> <li>\u672a\u6dfb\u52a0\u53cb\u94fe\u6216\u7533\u8bf7\u672a\u901a\u8fc7\uff0c\u8bc4\u8bba\u7559\u8a00\u4f1a\u88ab\u9690\u85cf\u3002</li> </ul> <p>\u672c\u7ad9\u5df2\u7ecf\u52a0\u5165\u5341\u5e74\u4e4b\u7ea6\uff1a  \u8bf7\u653e\u5fc3\u6dfb\u52a0\u672c\u7ad9\u53cb\u94fe</p> <p>\u53cb\u94fe\u683c\u5f0f\u793a\u4f8b/\u672c\u7ad9\u4fe1\u606f:</p> TxtHTML(\u63a8\u8350)Butterfly\u901a\u7528 <p>\u540d\u79f0: Wcowin's Blog \u94fe\u63a5: https://wcowin.work/ \u5934\u50cf: https://pic4.zhimg.com/80/v2-a0456a5f527c1923f096759f2926012f_1440w.webp \u7b80\u4ecb: \u5faa\u6b64\u82e6\u65c5\uff0c\u4ee5\u8fbe\u661f\u8fb0</p> <p>\u63a8\u8350\u5728\u8bc4\u8bba\u533a\u53d1\u9001\u8fd9\u79cd\u683c\u5f0f\uff0c*\u53f7\u7684\u9700\u8981\u586b\u5199\u81ea\u5df1\u7684\u4fe1\u606f</p> <pre><code>&lt;div class=\"card\"&gt; \n &lt;img class=\"ava\" src=\"*\u4f60\u7684\u5934\u50cf\u94fe\u63a5*\" /&gt; \n &lt;div class=\"card-header\"&gt; \n  &lt;div&gt; \n   &lt;a href=\"*\u4f60\u7684\u7f51\u7ad9\u5730\u5740* \" target=\"_blank\"&gt;*\u4f60\u7684\u7ad9\u70b9\u540d\u79f0*&lt;/a&gt; \n  &lt;/div&gt; \n  &lt;div class=\"info\"&gt;\n   *\u4f60\u7684\u7ad9\u70b9\u63cf\u8ff0*\n  &lt;/div&gt; \n &lt;/div&gt; \n&lt;/div&gt;\n</code></pre> <pre><code>- name: Wcowin's Blog\n  link: https://wcowin.work/\n  avatar: https://pic4.zhimg.com/80/v2-a0456a5f527c1923f096759f2926012f_1440w.webp\n  descr: \u5faa\u6b64\u82e6\u65c5\uff0c\u4ee5\u8fbe\u661f\u8fb0\n</code></pre> <p>\u70b9\u51fb\u586b\u5199\u53cb\u94fe\u7533\u8bf7\u95ee\u5377 </p> <p></p>"},{"location":"liuyanban/","title":"\u7559\u8a00\u677f","text":""},{"location":"liuyanban/#_1","title":"\u7545\u6240\u6b32\u8a00\u7559\u8a00\u677f","text":"<p>\u6708\u843d\u4e4c\u557c\u971c\u6ee1\u5929 \u6c5f\u67ab\u6e14\u706b\u5bf9\u6101\u7720</p> <p> \u300a\u67ab\u6865\u591c\u6cca\u300b\u00a0\u3010\u5510\u4ee3\u3011\u00a0\u5f20\u7ee7</p> <p> \u8bc4\u8bba\u7cfb\u7edf\u5207\u6362 </p> Giscus Cusdis <p>\u8bc4\u8bba\u5ba1\u6838\u540e\u624d\u4f1a\u663e\u793a</p>"},{"location":"tag/","title":"\u6807\u7b7e\ud83c\udff7","text":"<ul> <li> <p> Tips</p> <p>\u4ee5\u4e0b\u662f\u7f51\u7ad9\u6587\u7ae0\u7684\u6807\u7b7e\uff0c\u70b9\u51fb\u53ef\u8df3\u8f6c\u5230\u5bf9\u5e94\u6807\u7b7e\u4e0b\u7684\u6587\u7ae0</p> </li> </ul>"},{"location":"tag/#tag:hexo","title":"Hexo","text":"<ul> <li>            hexo hugo vuepress \u6587\u6863\u5199\u6cd5\u533a\u522b          </li> </ul>"},{"location":"tag/#tag:hugo","title":"Hugo","text":"<ul> <li>            hexo hugo vuepress \u6587\u6863\u5199\u6cd5\u533a\u522b          </li> </ul>"},{"location":"tag/#tag:vuepress","title":"VuePress","text":"<ul> <li>            hexo hugo vuepress \u6587\u6863\u5199\u6cd5\u533a\u522b          </li> </ul>"},{"location":"tag/#tag:\u4e2d\u6587\u6807\u7b7e1","title":"\u4e2d\u6587\u6807\u7b7e1","text":"<ul> <li>            \u4e2d\u6587\u6807\u9898\u6d4b\u8bd5\u6587\u7ae0          </li> </ul>"},{"location":"tag/#tag:\u4e2d\u6587\u6807\u7b7e2","title":"\u4e2d\u6587\u6807\u7b7e2","text":"<ul> <li>            \u4e2d\u6587\u6807\u9898\u6d4b\u8bd5\u6587\u7ae0          </li> </ul>"},{"location":"about/geren/","title":"\u5173\u4e8e\u6211","text":""},{"location":"about/geren/#_1","title":"\u4eca\u65e5\u8bd7\u8bcd","text":""},{"location":"about/geren/#_2","title":"\u5173\u4e8e\u6211","text":"\u89c2\u53f2\u77e5\u4eca\uff0c\u5f53\u601d\u8fdb\u9000\uff0c\u8bfb\u4e66\u660e\u5fd7\uff0c\u53ef\u8bc6\u6625\u79cb     \u2014\u2014Wcowin  \u4e0b\u8f7d\u7b80\u5386"},{"location":"about/geren/#_3","title":"\u4e2a\u4eba\u7b80\u4ecb","text":"<p>About me</p> <ul> <li> Hey, I'm Wcowin~</li> <li> \u5496\u5561\u91cd\u5ea6\u7231\u597d\u8005 </li> <li> \u70ed\u7231(xi\u0101)\u6298\u817e\u6280\u672f/\u6570\u5b66\uff0c\u76ee\u524d\u7684\u7814\u7a76\u9886\u57df\u662f\u5bc6\u7801\u5b66</li> <li> \u8bfb\u4e66\u660e\u5fd7;\u8bd7\u8bcd\u7231\u597d\u8005;\u559c\u6b22\u6751\u4e0a\u6625\u6811;\u64c5\u957f\u7fbd\u6bdb\u7403</li> <li> \u6e05\u9192\u77e5\u8da3\uff0c\u660e\u5f97\u5931\uff0c\u77e5\u8fdb\u9000 </li> </ul>"},{"location":"about/geren/#_4","title":"\u4eba\u751f\u6001\u5ea6","text":"<p>\ud835\ude3f\ud835\ude64\ud835\ude63'\ud835\ude69 \ud835\ude58\ud835\ude56\ud835\ude67\ud835\ude5a \ud835\ude56\ud835\ude57\ud835\ude64\ud835\ude6a\ud835\ude69 \ud835\ude6c\ud835\ude64\ud835\ude67\ud835\ude61\ud835\ude59\ud835\ude61\ud835\ude6e \ud835\ude5a\ud835\ude6e\ud835\ude5a\ud835\ude68 \ud835\ude69\ud835\ude64 \ud835\ude65\ud835\ude6a\ud835\ude67\ud835\ude68\ud835\ude6a\ud835\ude5a \ud835\ude6e\ud835\ude64\ud835\ude6a\ud835\ude67 \ud835\ude64\ud835\ude6c\ud835\ude63 \ud835\ude61\ud835\ude5e\ud835\ude5c\ud835\ude5d\ud835\ude69</p> <p></p>"},{"location":"about/geren/#_5","title":"\u8054\u7cfb\u6211","text":"\ud83d\udcac \u5fae\u4fe1\ud83d\udce7 \u90ae\u7bb1\ud83c\udf10 \u793e\u4ea4\ud83d\udccd \u5176\u4ed6 <p>  \u626b\u4e00\u626b\u4e0a\u9762\u7684\u4e8c\u7ef4\u7801\u56fe\u6848 \u52a0\u6211\u4e3a\u670b\u53cb </p> <p>  \u00a0 \u53d1\u9001\u7535\u5b50\u90ae\u4ef6      <p>             \ud83d\udca124\u5c0f\u65f6\u5185\u56de\u590d\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85         </p> </p> <p> <p>                 \u5173\u6ce8\u6211\u7684\u793e\u4ea4\u5a92\u4f53\uff0c\u83b7\u53d6\u6700\u65b0\u52a8\u6001             </p>  Telegram               Twitter              </p> <p> <p>     \u901a\u8fc7\u4e0b\u5217\u5e73\u53f0\u4e86\u89e3\u6211\u7684\u66f4\u591a\u5de5\u4f5c\u548c\u9879\u76ee\u7ecf\u5386     </p> \ud83c\udf1f GitHub  \u67e5\u770b GitHub      \ud83d\udcbc LinkedIn  \u67e5\u770b\u6863\u6848      <p>     \u968f\u65f6\u6b22\u8fce\u8054\u7cfb\u6211\u5408\u4f5c\u6216\u4ea4\u6d41\uff01     </p> <p>     \u65e0\u8bba\u662f\u6280\u672f\u63a2\u8ba8\u3001\u5b66\u4e60\u4ea4\u6d41\u8fd8\u662f\u804c\u4e1a\u673a\u4f1a\uff0c\u6211\u90fd\u4e50\u610f\u542c\u89c1\u4f60\u7684\u58f0\u97f3 \ud83d\ude04     </p> </p> <p>\ud83d\udcac\u6211\u7535\u8bdd\u53f7\u7801\u7684<code>MD5</code>\u7801\uff1a7037F514864088F907CC921687B670EE\uff08\u7834\u89e3\u6709\u5956\uff09 </p>"},{"location":"about/geren/#_6","title":"\u987b\u77e5","text":"<p>\u5982\u679c\u4f60\u5728\u6d4f\u89c8\u535a\u5ba2\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4e86\u4efb\u4f55\u95ee\u9898\uff0c\u6b22\u8fce\u524d\u5f80 GitHub \u7684\u4ee3\u7801\u4ed3\u5e93\u63d0\u4ea4 Issues \u6216\u76f4\u63a5\u4fee\u6539\u76f8\u5173\u6587\u4ef6\u540e\u63d0\u4ea4 Pull Requests\u3002\u5982\u679c\u4f60\u6709\u5176\u4ed6\u4e8b\u60c5\u60f3\u8981\u54a8\u8be2\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u65b9\u6309\u94ae\u4f7f\u7528\u90ae\u4ef6\u8054\u7cfb\u6211,\u8bf7\u4e0d\u8981\u6ee5\u7528\u535a\u5ba2\u7684\u8bc4\u8bba\u529f\u80fd\u53d1\u8868\u4e0e\u4e3b\u9898\u65e0\u5173\u8a00\u8bba\u3002</p> <p>\u4e0e\u6211\u8054\u7cfb</p> <p>\u5982\u679c\u7ed9\u6211\u53d1\u90ae\u4ef6\uff0c\u6216\u8005\u901a\u8fc7\u53f3\u4e0b\u89d2\u5fae\u4fe1\u6dfb\u52a0\u597d\u53cb\uff0c\u8bf7\u5199\u4e0a\u60a8\u7684\u771f\u540d\u5b9e\u59d3\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u77e5\u6765\u8def\u3001\u4e0a\u6765\u5c31\u95ee\u95ee\u9898\u7684\u5fae\u4fe1\u548c\u90ae\u4ef6\uff0c\u6211\u901a\u5e38\u4f1a\u76f4\u63a5\u5ffd\u7565\uff0c\u8c22\u8c22\u3002 </p> <p> \u53d1\u9001\u7535\u5b50\u90ae\u4ef6  </p>"},{"location":"about/resume/","title":"\u4e2a\u4eba\u7b80\u5386","text":"\u8bf7\u4f7f\u7528PC\u7aef\u67e5\u770b\uff0c\u8c22\u8c22 <ul> <li> <p> \u4e2a\u4eba\u7b80\u5386</p> <p></p> <p>  \u4e0b\u8f7dPDF  </p> </li> </ul>"},{"location":"about/test/","title":"\u6d4b\u8bd5\u5c0f\u7ec4\u4ef6","text":"<p>Info</p> <p>\u6d4b\u8bd5\u4e2d\u7684\u5c0f\u7ec4\u4ef6\uff0c\u53ef\u770b\u6e90\u4ee3\u7801\u81ea\u884c\u53d6\u7528</p> \u201c\u5faa\u6b64\u82e6\u65c5 \u4ee5\u8fbe\u661f\u8fb0\u201d <ul> <li> <p> \u5173\u4e8e</p> <ul> <li>\u6548\u7387</li> </ul> </li> </ul> <ul> <li> <p> \u63a8\u8350</p> <p> Wcowin - \u6280\u672f\u535a\u5ba2</p> </li> </ul> <ul> <li> <p> Release</p> <p>\u66f4\u65b0\u4e2d...</p> <p>\u2192 \u6240\u6709\u7248\u672c</p> </li> <li> <p> Wcowin</p> <p>\u66f4\u65b0\u4e2d...</p> <p>\u2192 \u4e86\u89e3\u66f4\u591a</p> </li> </ul> <p> </p> Image caption <p> <p>\\(\\overset{w\u00e1ng}{\u738b}\\overset{k\u0113}{\u79d1}\\overset{w\u00e9n}{\u6587}\\)</p> <ul> <li>H<sub>2</sub>O</li> <li>A<sup>T</sup>A</li> <li>This was marked</li> <li>This was inserted</li> <li>This was deleted</li> </ul> <p></p> <p></p>"},{"location":"about/test/#01","title":"01","text":"<ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> </ul> <ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul> <p>\u8fd9\u662f\u6d4b\u8bd5\u5e76\u4e14\u88ab\u63a9\u76d6\u7684\u6587\u5b57\uff01</p> \u5929\u6c14\u63d2\u4ef6 CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Tip <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Subscribe to our newsletter</p> <p>Send </p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] <p>\u5de6\u5bf9\u9f50\uff0c\u53f3\u5bf9\u9f50 </p> <p> </p> \u56fe\u7247\u8bf4\u660e <p>\u660e\u6697</p> <p></p> <p></p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <p>Pied Piper</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Ctrl+Alt+Del </p> <p> \u70b9\u6211\u56de\u5230\u9876\u90e8 </p> <p>Hover me</p> <p>Hover me</p> <p>The HTML specification is maintained by the W3C.</p> <p></p> <p><pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> .browserslistrc<pre><code>Wcowin\n</code></pre></p> <pre>\n  graph LR\n      A --- B\n      B--&gt;C[fa:fa-ban forbidden]\n      B--&gt;D(fa:fa-spinner);\n    </pre> <p>\u6765\u770b\u770b\u4e24\u4e2a\u91cd\u8981\u6781\u9650  </p> \\[\\displaystyle\\lim_{x \\rightarrow 0}\\frac{\\sin x}{x} = 1\\] \\[\\displaystyle\\lim_{x \\rightarrow + \\infty}(1 + \\frac{1}{x})^x = e\\] <p>\u6309\u94ae Green</p> \u6211\u662f\u4f1a\u9690\u85cf\u7684\u5143\u7d20\u3002 \u5934\u90e8 \u83dc\u5355 \u4e3b\u8981\u5185\u5bb9\u533a\u57df \u53f3\u4fa7 \u5e95\u90e8 <p> \u8fd9\u662f\u4e00\u4e2a\u7535\u5b50\u90ae\u4ef6\u94fe\u63a5\uff1a  \u53d1\u9001\u90ae\u4ef6 </p> 100 200 300 400 500 600 000000 000033 000066 000099 0000CC 0000FF 003300 003333 003366 003399 0033CC 0033FF 006600 006633 006666 006699 0066CC 0066FF 009900 009933 009966 009999 0099CC 0099FF 00CC00 00CC33 00CC66 00CC99 00CCCC 00CCFF 00FF00 00FF33 00FF66 00FF99 00FFCC 00FFFF 330000 330033 330066 330099 3300CC 3300FF 333300 333333 333366 333399 3333CC 3333FF 336600 336633 336666 336699 3366CC 3366FF 339900 339933 339966 339999 3399CC 3399FF 33CC00 33CC33 33CC66 33CC99 33CCCC 33CCFF 33FF00 33FF33 33FF66 33FF99 33FFCC 33FFFF 660000 660033 660066 660099 6600CC 6600FF 663300 663333 663366 663399 6633CC 6633FF 666600 666633 666666 666699 6666CC 6666FF 669900 669933 669966 669999 6699CC 6699FF 66CC00 66CC33 66CC66 66CC99 66CCCC 66CCFF 66FF00 66FF33 66FF66 66FF99 66FFCC 66FFFF 990000 990033 990066 990099 9900CC 9900FF 993300 993333 993366 993399 9933CC 9933FF 996600 996633 996666 996699 9966CC 9966FF 999900 999933 999966 999999 9999CC 9999FF 99CC00 99CC33 99CC66 99CC99 99CCCC 99CCFF 99FF00 99FF33 99FF66 99FF99 99FFCC 99FFFF CC0000 CC0033 CC0066 CC0099 CC00CC CC00FF CC3300 CC3333 CC3366 CC3399 CC33CC CC33FF CC6600 CC6633 CC6666 CC6699 CC66CC CC66FF CC9900 CC9933 CC9966 CC9999 CC99CC CC99FF CCCC00 CCCC33 CCCC66 CCCC99 CCCCCC CCCCFF CCFF00 CCFF33 CCFF66 CCFF99 CCFFCC CCFFFF FF0000 FF0033 FF0066 FF0099 FF00CC FF00FF FF3300 FF3333 FF3366 FF3399 FF33CC FF33FF FF6600 FF6633 FF6666 FF6699 FF66CC FF66FF FF9900 FF9933 FF9966 FF9999 FF99CC FF99FF FFCC00 FFCC33 FFCC66 FFCC99 FFCCCC FFCCFF FFFF00 FFFF33 FFFF66 FFFF99 FFFFCC FFFFFF <p></p> <p> </p> <p>      Email me!    </p> <p> </p>"},{"location":"about/zcw/","title":"\u652f\u6301\u4f5c\u8005","text":"<ul> <li> <p> \u7ed9\u6211\u53d1\u9001\u90ae\u7bb1</p> </li> <li> <p> \u70b9\u51fb\u6b64\u5904\u8bbf\u95eeGithub\u4ed3\u5e93</p> </li> </ul> <p>\u53ef\u4ee5\u7684\u8bdd \u8bf7\u6211\u559d\u4e00\u676f\u5496\u5561\u5427\u2615\ufe0f</p>"},{"location":"about/zcw/#alipay","title":"Alipay","text":""},{"location":"about/zcw/#wechat-pay","title":"WeChat Pay","text":""},{"location":"about/zcw/#ko-fi","title":"ko-fi","text":"<p>\u8bf7\u4f5c\u8005\u559d\u676f\u5496\u5561</p>"},{"location":"about/zcw/#_2","title":"\u8d5e\u52a9\u5217\u8868","text":"\u8d5e\u52a9\u4eba \u8d5e\u52a9\u91d1\u989d \u8d5e\u52a9\u65f6\u95f4 *\u6025 15\uffe5 25/04/18 \u5343\u5e73 100\uffe5 25/04/16"},{"location":"blog/","title":"\u535a\u5ba2","text":"<ul> <li> <p> What is Blog?</p> <p>\u535a\u5ba2\uff0c\u4ec5\u97f3\u8bd1\uff0c\u82f1\u6587\u540d\u4e3aBlogger\uff0c\u4e3aWeb Log\u7684\u6df7\u6210\u8bcd\u3002 \u5176\u6b63\u5f0f\u540d\u79f0\u4e3a\u7f51\u7edc\u65e5\u8bb0\uff1b\u53c8\u97f3\u8bd1\u4e3a\u90e8\u843d\u683c\u6216\u90e8\u843d\u9601\u7b49\uff0c\u662f\u793e\u4f1a\u5a92\u4f53\u7f51\u7edc\u7684\u4e00\u90e8\u5206\u3002\u662f\u4f7f\u7528\u7279\u5b9a\u7684\u8f6f\u4ef6\uff0c\u5728\u7f51\u7edc\u4e0a\u51fa\u7248\u3001\u53d1\u8868\u548c\u5f20\u8d34\u4e2a\u4eba\u6587\u7ae0\u7684\u4eba\uff0c\u6216\u8005\u662f\u4e00\u79cd\u901a\u5e38\u7531\u4e2a\u4eba\u7ba1\u7406\u3001\u4e0d\u5b9a\u671f\u5f20\u8d34\u65b0\u7684\u6587\u7ae0\u7684\u7f51\u7ad9</p> </li> </ul>"},{"location":"blog/2025/05/30/%E4%B8%AD%E6%96%87%E6%A0%87%E9%A2%98%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/","title":"\u4e2d\u6587\u6807\u9898\u6d4b\u8bd5\u6587\u7ae0","text":"<p>\u6458\u8981:\u4eca\u5929</p> <pre><code>\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u65b0\u5efa\u672c\u6587\u7ae0\nhexo new \u4e2d\u6587\u6807\u9898\u6d4b\u8bd5\u6587\u7ae0\n</code></pre>","tags":["\u4e2d\u6587\u6807\u7b7e1","\u4e2d\u6587\u6807\u7b7e2"]},{"location":"blog/2025/05/30/%E4%B8%AD%E6%96%87%E6%A0%87%E9%A2%98%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/#bug","title":"\u4e0b\u8fb9\u6709\u4e2a\u732b\u732b\u56fe\u7247 \u6b63\u5e38\u663e\u793a\u5219\u6ca1\u95ee\u9898 \u5426\u5219\u6709bug","text":"<p>Share on  Share on </p>","tags":["\u4e2d\u6587\u6807\u7b7e1","\u4e2d\u6587\u6807\u7b7e2"]},{"location":"blog/2025/07/06/hexo-hugo-vuepress-%E6%96%87%E6%A1%A3%E5%86%99%E6%B3%95%E5%8C%BA%E5%88%AB/","title":"hexo hugo vuepress \u6587\u6863\u5199\u6cd5\u533a\u522b","text":"<p>\u6458\u8981: hexo hugo vuepress \u6587\u6863\u5199\u6cd5\u533a\u522b</p>","tags":["Hexo","Hugo","VuePress"]},{"location":"blog/2025/07/06/hexo-hugo-vuepress-%E6%96%87%E6%A1%A3%E5%86%99%E6%B3%95%E5%8C%BA%E5%88%AB/#_1","title":"\u533a\u522b","text":"","tags":["Hexo","Hugo","VuePress"]},{"location":"blog/2025/07/06/hexo-hugo-vuepress-%E6%96%87%E6%A1%A3%E5%86%99%E6%B3%95%E5%8C%BA%E5%88%AB/#hexo","title":"hexo\u5199\u6cd5","text":"<pre><code>---\ntitle: \u6807\u98981\ndate: 2025-07-06 13:18:30\n# \u5206\u7c7b \u533a\u5206\u4e0a\u4e0b\u7ea7\ncategories:\n  - \u7236\u5206\u7c7b1\n  - \u5b50\u5206\u7c7b1-1\ntags:\n  - \u6807\u7b7e1\n  - \u6807\u7b7e2\n# \u7981\u6b62\u8bc4\u8bba ,\u4e0d\u517c\u5bb9 \u8fc1\u79fb\u535a\u5ba2\u65f6\u9700\u8981\u624b\u52a8\u5904\u7406\ncomments: false\n# \u6587\u7ae0\u66f4\u65b0\u65e5\u671f ,\u4e0d\u517c\u5bb9 \u8fc1\u79fb\u535a\u5ba2\u65f6\u9700\u8981\u624b\u52a8\u5904\u7406\nupdated: 2025-07-06 13:18:30\n---\n</code></pre>","tags":["Hexo","Hugo","VuePress"]},{"location":"blog/2025/07/06/hexo-hugo-vuepress-%E6%96%87%E6%A1%A3%E5%86%99%E6%B3%95%E5%8C%BA%E5%88%AB/#hugo-next","title":"hugo next \u5199\u6cd5","text":"<pre><code>---\n# \u6807\u9898\u6700\u597d\u5e26\u53cc\u5f15\u53f7 \u8981\u4e0d\u5e26\u7a7a\u683c\u7684\u8bdd \u4f1a\u62a5\u9519\ntitle: \"\u6807\u98981\"\ndate: 2025-07-06 13:18:30\n# \u5206\u7c7b \u533a\u5206\u4e0a\u4e0b\u7ea7\ncategories:\n  - \u7236\u5206\u7c7b1\n  - \u5b50\u5206\u7c7b1-1\ntags:\n  - \u6807\u7b7e1\n  - \u6807\u7b7e2\n# \u7981\u6b62\u8bc4\u8bba,\u4e0d\u517c\u5bb9 \u8fc1\u79fb\u535a\u5ba2\u65f6\u9700\u8981\u624b\u52a8\u5904\u7406\ncomment:\n  enable: false\n# \u6587\u7ae0\u66f4\u65b0\u65e5\u671f ,\u4e0d\u517c\u5bb9 \u8fc1\u79fb\u535a\u5ba2\u65f6\u9700\u8981\u624b\u52a8\u5904\u7406\nlastmod: 2025-07-06 13:18:30\n---\n</code></pre>","tags":["Hexo","Hugo","VuePress"]},{"location":"blog/2025/07/06/hexo-hugo-vuepress-%E6%96%87%E6%A1%A3%E5%86%99%E6%B3%95%E5%8C%BA%E5%88%AB/#vuepress2-hope","title":"Vuepress2 hope \u5199\u6cd5","text":"<pre><code>---\ntitle: \"\u6807\u98981\"\ndate: 2025-07-06 13:18:30\n# \u5206\u7c7b \u4e0d\u533a\u5206\u4e0a\u4e0b\u7ea7 \u517c\u5bb9categories  \u65e0\u635f\u8fc1\u79fb\ncategory:\n  - \u5206\u7c7b1\n  - \u5206\u7c7b2\n# \u6807\u7b7e \u517c\u5bb9tags \u65e0\u635f\u8fc1\u79fb\ntag:\n  - \u6807\u7b7e1\n  - \u6807\u7b7e2\n# \u7981\u6b62\u8bc4\u8bba,\u4e0d\u517c\u5bb9 \u8fc1\u79fb\u535a\u5ba2\u65f6\u9700\u8981\u624b\u52a8\u5904\u7406\ncomment: false\n---\n</code></pre>","tags":["Hexo","Hugo","VuePress"]},{"location":"blog/2025/07/06/hexo-hugo-vuepress-%E6%96%87%E6%A1%A3%E5%86%99%E6%B3%95%E5%8C%BA%E5%88%AB/#_2","title":"\u603b\u7ed3","text":"<p>\u5efa\u8bae\u4f7f\u7528\u4ee5\u4e0b\u6a21\u7248 \u517c\u5bb93\u4e2a</p> <pre><code>---\ntitle: \"\u6807\u98981\"\ndate: 2025-07-06 13:18:30\n# \u5206\u7c7b \u533a\u5206\u4e0a\u4e0b\u7ea7\ncategories:\n  - \u7236\u5206\u7c7b1\n  - \u5b50\u5206\u7c7b1-1\ntags:\n  - \u6807\u7b7e1\n  - \u6807\u7b7e2\n---\n</code></pre>","tags":["Hexo","Hugo","VuePress"]},{"location":"blog/2025/07/06/hexo-hugo-vuepress-%E6%96%87%E6%A1%A3%E5%86%99%E6%B3%95%E5%8C%BA%E5%88%AB/#_3","title":"\u6269\u5c55","text":"","tags":["Hexo","Hugo","VuePress"]},{"location":"blog/2025/07/06/hexo-hugo-vuepress-%E6%96%87%E6%A1%A3%E5%86%99%E6%B3%95%E5%8C%BA%E5%88%AB/#astroastrowind","title":"Astro\u4e3b\u9898AstroWind\u5199\u6cd5","text":"<p>https://github.com/onwidget/astrowind</p> <pre><code>---\ntitle: Hexo\u591a\u5206\u7c7b\u591a\u6807\u7b7e\u56fe\u7247\u8def\u5f84\u5199\u4f5c\u6559\u7a0b\npublishDate: 2025-05-30 11:19:04\ncategory: Hexo\ntags: \n - Hexo\n---\n</code></pre>","tags":["Hexo","Hugo","VuePress"]},{"location":"blog/2025/07/06/hexo-hugo-vuepress-%E6%96%87%E6%A1%A3%E5%86%99%E6%B3%95%E5%8C%BA%E5%88%AB/#astrofuwari","title":"Astro\u4e3b\u9898fuwari\u5199\u6cd5","text":"<p>https://github.com/saicaca/fuwari</p> <pre><code>---\ntitle: Simple Guides for Fuwari\npublished: 2024-04-01\ntags: [\"Fuwari\", \"Blogging\", \"Customization\"]\ncategory: Guides  #\u5206\u7c7b\u597d\u50cf\u4e0d\u652f\u6301\u6570\u7ec4 \u5fc5\u987b\u4e3a\u5b57\u7b26\u4e32 \u901a\u8fc7\u4e8c\u6b21\u5f00\u53d1\u6539\u4e3a\u6570\u7ec4 \u652f\u6301\u591a\u5206\u7c7b\n---\n\u5982\u679ctags\u7ed9\u7a7a \u5fc5\u987b\u8fd9\u4e48\u5199\ntags: []\n</code></pre>","tags":["Hexo","Hugo","VuePress"]},{"location":"blog/2025/07/06/hexo-hugo-vuepress-%E6%96%87%E6%A1%A3%E5%86%99%E6%B3%95%E5%8C%BA%E5%88%AB/#mkdocs-material","title":"mkdocs-material\u5199\u6cd5","text":"<p>https://github.com/squidfunk/mkdocs-material</p> <pre><code>---\ntitle: \u4e2d\u6587\u6807\u9898\u6d4b\u8bd5\u6587\u7ae0\ndate: 2025-05-30 19:13:23\ncategories: \n - \u4e2d\u6587\u5206\u7c7b\ntags: \n - \u4e2d\u6587\u6807\u7b7e\n---\n</code></pre>","tags":["Hexo","Hugo","VuePress"]},{"location":"blog/2025/07/06/hexo-hugo-vuepress-%E6%96%87%E6%A1%A3%E5%86%99%E6%B3%95%E5%8C%BA%E5%88%AB/#docusaurus","title":"Docusaurus\u5199\u6cd5","text":"<pre><code>---\ntitle: \u4e2d\u6587\u6807\u9898\u6d4b\u8bd5\u6587\u7ae01\ndate: 2025-05-31 19:13:23\ntags: \n - \u4e2d\u6587\u6807\u7b7e\n---\n&lt;!-- more --&gt; \u4e0d\u597d\u4f7f \u6539\u4e3a &lt;!-- truncate --&gt;  \u901a\u8fc7\u914d\u7f6e\u53ef\u4ee5\u4fee\u6539\u4e3a&lt;!-- more --&gt;\n\ncategories: \u4e2d\u6587\u5206\u7c7b           \u597d\u50cf\u4e0d\u652f\u6301\u5206\u7c7b \u6253\u7b97\u7528\u4f5c\u8005\u6dfb\u52a0\u5206\u7c7b\n</code></pre> <p>Share on  Share on </p>","tags":["Hexo","Hugo","VuePress"]},{"location":"blog/2021/12/18/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95/","title":"\u535a\u5ba2\u6587\u7ae0\u6d4b\u8bd5","text":"<p> Share on  Share on </p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>In addition to the basic getting started guides, we offer tutorials that aim to show how you can use Material for MkDocs in different use cases. In contrast to the getting started guides or the reference documentation, the tutorials show the breadth of features available in Material for MkDocs but also within the wider MkDocs ecosystem.</p> <p>The tutorials guide you through worked examples, so by following them you should gain not only an understanding of how to use Material for MkDocs, but also a template for your own projects. For convenience, these templates are also available as template repositories on GitHub.</p> <p>The tutorials assume that you have installed either the public version or the Insiders edition of Material for MkDocs and that you have worked through the creating your site setup guide.</p> <p>Note that where the features we use require the Insiders edition, we mark these with the heart icon:  If you are using the public version then you can skip these steps. Sometimes there will be ways of achieving the same goal that differ between the public version and the Insider edition. In that case, we will show them in a tabbed view so you can see one or the other.</p> <p>Feedback wanted!</p> <p>The tutorials are a recent addition to our documentation and we are still working out what shape they should have in the end. Please provide any feedback you might have in this discussion thread.</p> <p>Note, however, that suggestions should be specific and feasible. We want to focus on creating more content at the moment, instead of developing a specific styling or behaviour for the tutorials. If there are worthwhile improvements that we can make through simple customization then we are happy to consider those.</p>"},{"location":"tutorials/#blogs","title":"Blogs","text":"<ul> <li>Basics (20 min)    covers the basics of setting up a blog, including post metadata.</li> <li>Navigation, pagination, multiple authors (30 min)   describes how to make it easier for your readers to find content.</li> <li>Engagement and dissemination (30 min)   walks you through ways of increasing engagement with your content.</li> </ul> <p> Template Repository</p>"},{"location":"tutorials/#social-cards","title":"Social cards","text":"<ul> <li>Basics (20 min)    shows you how to configure Material for MkDocs to create social cards for   your content.</li> <li>Custom cards (15 min)   shows you how to design your own custom social cards.</li> </ul> <p> Template Repository</p>"},{"location":"tutorials/blogs/basic/","title":"Basic blogs","text":"<p>Blogs are a great way to engage with your audience. Software developers can use a blog to announce new features, demonstrate their usage and provide background information. You can demonstrate competence by commenting on the state of the art or document your own work as best practice. Posts on current topics can help draw in visitors for your main website and can keep your audience engaged. Of course, you can blog about any topics close to your heart.</p> <p>The blog plugin makes running a blog alongside your other content easy but you can also configure it to run a stand-alone blog if posts are the only kind of content you need.</p> <p>After a brief overview of the basic concepts of a blog, this tutorial guides you through the process of configuring the blog plugin, setting up your blog, creating posts, and defining post metadata.</p> <p>Time required: typically 20 minutes</p>"},{"location":"tutorials/blogs/basic/#key-concepts","title":"Key concepts","text":"<p>Post, excerpt: a blog consists of a number of self-contained posts (often called articles) and an index page that shows the posts in reverse chronological order, with the most recent post at the top. The index page usually shows only a short excerpt and a link that the user can click to navigate to the full post.</p> <p>Metadata: both the index page and the post itself list information such as when you published the post, when you updated it, who the author is, and what the expected reading time is.</p> <p>Slug: since the blog posts are primarily arranged by time and not into a hierarchy, their URLs do not reflect such a structure. Instead, each post's URL contains a shortened description, the slug, which is usually derived from the first heading in the post.</p> <p>Navigation: the main navigation structure is the timeline, which you can subdivide into categories. The main index page shows the more recent posts while an archive section allows access to older ones, organized by year. In addition, posts can be tagged and tag index pages provide an additional navigation structure based on content.</p> <p>You can see all these elements on the Material for MkDocs blog.</p>"},{"location":"tutorials/blogs/basic/#setting-up-your-blog","title":"Setting up your blog","text":"<p>The blog plugin is part of Material for MkDocs but you need to configure it in the <code>mkdocs.yml</code>.</p> <p>Set up a blog</p> <p>If you have not done so already, create a project for your blog, then edit the <code>mkdocs.yml</code> file to make sure it has the following content:</p> <pre><code>site_name: Blog Tutorial\nsite_description: an example blog set up following the tutorial\nsite_url: http://www.example.com\n\ntheme:\n  name: material\n\nplugins:\n  - search\n  - blog\n</code></pre> <p>The blog plugin will create a directory structure for your blog posts if it does not exist, so simply run <code>mkdocs serve</code> to get:</p> <pre><code>docs\n\u251c\u2500\u2500 blog\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 posts\n\u2514\u2500\u2500 index.md\n</code></pre> <p>Now create your first blog post in <code>docs/blog/posts</code>. You can use any naming convention and directory structure you like for your posts, as long as they are inside <code>docs/blog/posts</code>.</p> <p>Each post must have a page header, which appears at the top of the Markdown code between lines with three dashes. Within this header, you need to have at least a <code>date</code> entry but you can add other data, as you will see below. Following the header comes the page content. Note that it is important to have a level one heading as the plugin uses it to produce the slug. Also, by adding <code>&lt;!-- more --&gt;</code> to the page, you can define where the excerpt will end that the index page shows.</p> <p>Write your first post</p> <p>Create a file <code>docs/blog/posts/myfirst.md</code> with the following contents:</p> <pre><code>---\ndate:\n  created: 2023-12-31\n---\n\n# Happy new years eve!\n\nWe hope you are all having fun and wish you all the best for the new year!\n&lt;!-- more --&gt;\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\ntempor incididunt ut labore et dolore magna aliqua.\n</code></pre> <p>Then, run <code>mkdocs serve</code> and point your web browser at <code>http://localhost:8000/blog</code>.</p> <p>The blog plugin automatically creates navigation elements for the blog. The index page shows only the extract. When you select the \"Continue reading\" link, you will get to the full blog post. Note how it has a URL generated from the first-level heading.</p> <p>Navigation</p> <p>We also have a tutorial on navigation that shows you how to change the automatically created navigation and integrate the blog into your existing navigation structure. It shows how to create secondary navigation, produce author pages, and control pagination.</p>"},{"location":"tutorials/blogs/basic/#post-metadata","title":"Post metadata","text":"<p>In addition to the date, you can provide other metadata and give the plugin instructions, such as to treat a post as a draft or to pin it.</p>"},{"location":"tutorials/blogs/basic/#drafts","title":"Drafts","text":"<p>You may want to produce a draft of a blog post and work with it locally but exclude it from the build that you publish. Simply add a field to the page header to indicate that a post is still in draft form.</p> <p>Create a draft</p> <p>Create a second blog post in <code>docs/blogs/posts/draft.md</code> with the following contents:</p> <pre><code>---\ndate:\n  created: 2024-01-01\ndraft: true\n---\n\n# Happy new year!\n\nHappy 2024 to everyone. Wishing you all the best!\n&lt;!-- more --&gt;\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\ntempor incididunt ut labore et dolore magna aliqua.\n</code></pre> <p>Now, note how the draft appears on the index page but with a label that indicates that it is a draft. When you run <code>mkdocs build</code>, the draft will not appear in the output:</p> <pre><code>$ mkdocs build\n$ ls site/blog\nsite/blog\n\u251c\u2500\u2500 2023\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 12\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 31\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 happy-new-years-eve\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 index.html\n...\n</code></pre> <p>The first blog post for 2024 is not there yet because it is still in draft stage. Remember to remove the <code>draft</code> setting in the header when it is time to publish it.</p> <p>If you are using the Insiders Edition, you can also create a folder to keep your drafts in and use the Meta plugin to add the <code>draft</code> header setting to all the posts in that folder. This has the advantage that it is easier to see which posts are still in draft form. We will cover the Meta plugin later on.</p>"},{"location":"tutorials/blogs/basic/#edits","title":"Edits","text":"<p>Sometimes, bloggers need to update a post. This might happen when you make a mistake or when something changes that you need to reflect in the post. To indicate you have edited a post, you can include an <code>updated</code> date in the page header.</p> <p>Editing a post</p> <p>Make a change to your first blog post, then add an edit date to the header:</p> <pre><code>---\ndate:\n  created: 2023-12-31\n  updated: 2024-01-02\n---\n</code></pre> <p>The Metadata section of the blog post itself will contain the edit date, though the index page omits this detail by default.</p>"},{"location":"tutorials/blogs/basic/#reading-time","title":"Reading time","text":"<p>To give the reader some idea of how long it might take them to read a post, a read time is automatically calculated. If you want to override this, you can do so in the page header by specifying the number of minutes you estimate your readers will take the read the post.</p> <p>Overriding the reading time</p> <p>Add a reading time override to your first blog post:</p> <pre><code>---\ndate:\n  created: 2023-12-31\n  updated: 2024-01-02\nreadtime: 15\n---\n</code></pre>"},{"location":"tutorials/blogs/basic/#pinning","title":"Pinning","text":"<p>Sometimes, blog authors want to 'pin' a specific post so that it will always appear at the top of the index page, no matter what else gets published. If you are using the Insiders Edition, you can achieve this by adding the <code>pin</code> attribute in the page header:</p> <p>Pin a post </p> <p>Add the <code>pin</code> attribute to your first blog post:</p> <pre><code>---\ndate:\n  created: 2023-12-31\n  updated: 2024-01-02\nreadtime: 15\npin: true\n---\n</code></pre> <p>Observe how this makes the post appear on top of the index page even though its publication date is prior to other posts. A small pin icon shows that the post has been pinned.</p>"},{"location":"tutorials/blogs/basic/#related-links","title":"Related links","text":"<p>When your blog is part of a wider site such as technical documentation, you will want to provide links from blog posts into your other content. One way you can do this is to have a related links section. The blog plugin can create one for you if you provide link targets in your page header:</p> <p>Add a related links section </p> <p>Add the following to a blog post:</p> <pre><code>---\ndate:\n  created: 2023-12-31\n...\nlinks:\n  - index.md\n  - blog/index.md\n---\n</code></pre> <p>The related links appear underneath the Metadata section.</p> <p>The nice thing here is that you do not need to provide a page title. The plugin will deduce the link text by applying the same logic that MkDocs uses for the main navigation. In fact, the syntax is the same as that of the <code>nav</code> section in the <code>mkdocs.yml</code>, so you can override the title if you want and even define subsections:</p> <p>Override the page titles</p> <p>Change the link section to override the page titles:</p> <pre><code>---\ndate:\n  created: 2023-12-31\n...\nlinks:\n  - Homepage: index.md\n  - Blog index: blog/index.md\n  - External links:\n    - Material documentation: https://squidfunk.github.io/mkdocs-material\n---\n</code></pre> <p>The plugin renders related links in the left sidebar on screens that are wide enough and at the bottom of the post on narrow screens. Change the size of your browser window to see this in action.</p>"},{"location":"tutorials/blogs/basic/#meta-plugin","title":"Meta plugin","text":"<p>The Meta plugin helps simplify the management of metadata that is common to a group of files in the same subdirectory. Instead of having to repeat the same metadata in the page headers of a number of files, you can add a <code>.meta.yml</code> file in the directory and the Meta plugin will merge its contents into the headers of all the pages contained. Settings from the page header take precedence, so you can always override settings by adding them to a post's header.</p> <p>For example, you may want to manage drafts by keeping them in a directory together so that they are not only flagged as drafts but also easier to find. (Otherwise, you would need to inspect the page headers or trace back from the output to the files to figure out which posts are drafts.)</p> <p>Drafts using the Meta plugin </p> <p>You first need to activate the plugin in your <code>mkdocs.yaml</code>:</p> <pre><code>plugins:\n  - search\n  - blog\n  - meta\n</code></pre> <p>Now create the folder for the drafts:</p> MacOS/LinuxWindows <pre><code>$ mkdir docs/blog/posts/drafts\n</code></pre> <pre><code>$ mkdir docs\\blog\\posts\\drafts\n</code></pre> <p>Now, within this folder, crate a file <code>.meta.yml</code> that contains:</p> <pre><code>draft: true\n</code></pre> <p>Add another blog post and store it in <code>docs/blog/posts/drafts</code>. When you look at it locally, you will see the label that identifies it as a draft, while in the version built for publication it does not appear. To move a post from draft status to published, simply move it outside <code>drafts/</code>.</p>"},{"location":"tutorials/blogs/basic/#whats-next","title":"What's next?","text":"<p>You should now have a working blog. However, as it accumulates content, you may want to make sure that people can find posts they are interested in, so you may want to add secondary navigation with tags and categories. You may have more than one author and want to attribute posts to them as well as generate author pages for them. We have a tutorial on navigation, pagination, and authors that covers these topics.</p> <p>You may want to increase engagement with your blog by allowing people to subscribe to an RSS feed or by setting up a comment system. The engagement and dissemination tutorial walks you through setting these up.</p>"},{"location":"tutorials/blogs/engage/","title":"Engagement and dissemination","text":"<p>You can foster reader engagement and improve the dissemination of content on your blog by providing an RSS feed that people can subscribe to and by integrating a discussion system. To learn more about who is or is not reading your posts, you may want to integrate an analytics system. You may also want to post on social media when you publish a new blog post. This tutorial gives you a leg up on all of these topics.</p> <p>Time required: typically 30 minutes</p>"},{"location":"tutorials/blogs/engage/#rss-feeds","title":"RSS feeds","text":"<p>An RSS feed allows users to subscribe to a blog so that they get notified when you publish new posts. RSS Feed readers are often used to access blogs that a user follows. They usually support downloading the blog content for offline consumption.</p> <p>An easy way to create an RSS feed for your blog is to use the MkDocs RSS Plugin, which is well integrated with Material for MkDocs. Since it is a third-party plugin, you need to install it before using it.</p> <p>Add an RSS feed</p> <p>Install the RSS plugin into your project:</p> <pre><code>$ pip install mkdocs-rss-plugin\n</code></pre> <p>It is important that have the <code>site_name</code>, <code>site_description</code> and <code>site_url</code> settings configured as instructed in the basic blog tutorial. The RSS plugin makes use of this information to construct the feed, so make sure you have configured them.</p> <p>Now, configure the plugin in the <code>mkdocs.yml</code>. The options provided restrict the pages that RSS entries are created for to the blog posts, which is probably what you want. Also note the configuration of the date fields to match the format that Material for MkDocs uses to accommodate both a creation date and a date for updates.</p> <pre><code>plugins:\n    - ...\n    - rss:\n        match_path: \"blog/posts/.*\"\n        date_from_meta:\n          as_creation: date.created\n          as_update: date.updated\n</code></pre> <p>Have a look at http://localhost:8000/feed_rss_created.xml to see the RSS feed in all its XML glory. You can use a browser like Firefox or Chrome that can display the raw RSS feed or use <code>curl</code> to get the feed and <code>xmllint</code> to format it. (You may need to install these tools.)</p> <pre><code>curl -s http://localhost:8000/feed_rss_created.xml | xmllint --format -\n</code></pre> <p>You may also want to try your feed with a feed reader. There are various desktop and mobile apps as well as online services. Of course, to use the latter you will need to deploy your project somewhere that is accessible to them.</p> <p>This minimal configuration should work well if you have not made any changes to the default configuration of the blog plugin. For more information on adapting the feed to your needs, see the RSS plugin's documentation.</p>"},{"location":"tutorials/blogs/engage/#social-media-buttons","title":"Social media buttons","text":"<p>Social media buttons can serve two purposes: to allow your readers to navigate to your social media profiles or to share content you have published via their own accounts.</p>"},{"location":"tutorials/blogs/engage/#profile-links","title":"Profile links","text":"<p>Links to social media profiles a usually provided in the footer of pages and Material for MkDocs makes this easy. All you need to do is to provide the necessary links and define the icons to use.</p> <p>Adding social media profile links</p> <p>Add an <code>extra</code> section to your <code>mkdocs.yml</code> and, within it, a <code>social</code> section to contain a list of link definitions. These consist of the logo to use and the link to the profile.</p> <pre><code>extra:\n  social:\n    - icon: fontawesome/brands/mastodon\n      name: squidfunk on Mastodon\n      link: https://fosstodon.org/@squidfunk\n</code></pre> <p>For the <code>icon</code>, you can choose any valid path to an icon bundled with the theme. The <code>name</code> will be used as the title attribute for the icon and including this improves accessibility. For popular social media systems, the link needs to be absolute and needs to include the scheme, most likely <code>https://</code>.</p> <p>You can also use other schemes. For example, to cerate an icon that allows people to create an email, add this:</p> <pre><code>extra:\n  social:\n  - icon: /fontawesome/regular/envelope\n    name: send me an email\n    link: mailto:&lt;email-address&gt;\n</code></pre> <p>Finally, you can specify a URL within your site, such as to your contact page. It is possible to specify only the path to the page:</p> <pre><code>extra:\n  social:\n  - icon: /material/mailbox\n    name: contact us\n    link: /contact\n</code></pre>"},{"location":"tutorials/blogs/engage/#share-and-like-buttons","title":"Share and like buttons","text":"<p>Adding buttons that let people share your content on social media is a bit more involved, which is why there are companies offering components for this.</p> <p>Data Protection</p> <p>\"Share\" and \"Like\" buttons that use integrations provided by social media companies often leave copious data traces even when the user does not interact with these buttons. If you choose to integate such feature on your site please be aware of the data protection implications and your duties as a provider to ensure that processing occurs only once the user has granted consent.</p> <p>This implementation of share buttons deliberately does not use third party code. It supports sharing to Twitter/X and Facebook without causing a data flow to these companies whenever someone views the pages. Only when someone clicks a share button will there be interactions with those companies' servers.</p> <p>Add share buttons</p> <p>In order to add the share buttons, you can add a hook that appends buttons for sharing the current page.</p> <p>Create a directory <code>hooks</code> in your project root and configure it in your <code>mkdocs.yml</code>:</p> <pre><code>hooks:\n  - hooks/socialmedia.py\n</code></pre> <p>Add the file <code>hooks/socialmedia.py</code> with the following Python code:</p> <pre><code>from textwrap import dedent\nimport urllib.parse\nimport re\n\nx_intent = \"https://x.com/intent/tweet\"\nfb_sharer = \"https://www.facebook.com/sharer/sharer.php\"\ninclude = re.compile(r\"blog/[1-9].*\")\n\ndef on_page_markdown(markdown, **kwargs):\n    page = kwargs['page']\n    config = kwargs['config']\n    if not include.match(page.url):\n        return markdown\n\n    page_url = config.site_url+page.url\n    page_title = urllib.parse.quote(page.title+'\\n')\n\n    return markdown + dedent(f\"\"\"\n    [Share on :simple-x:]({x_intent}?text={page_title}&amp;url={page_url}){{ .md-button }}\n    [Share on :simple-facebook:]({fb_sharer}?u={page_url}){{ .md-button }}\n    \"\"\")\n</code></pre> <p>The hook first checks if the current page is a blog post and then appends Markdown code for the share buttons. The buttons use icons, so you also need to configure the following markdown extensions:</p> <pre><code>markdown_extensions:\n  - attr_list\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n</code></pre>"},{"location":"tutorials/blogs/engage/#add-a-discussion-system","title":"Add a discussion system","text":"<p>Allowing your readers to comment on your posts is a great way of receiving feedback, learning something, as well as giving readers the opportunity to discuss the content and the topic it is about.</p> <p>There are plenty of discussion system out there and you will need to consider your audience when choosing one appropriate for your blog. Likewise, you will also need to consider existing commitments to communication channels. If you are a heavy user Slack, for example, you may have a string preference for this system. Consider that when you add a communication channel, you will need to be prepared to use it regularly and to moderate discussions.</p>"},{"location":"tutorials/blogs/engage/#giscus-integration","title":"Giscus integration","text":"<p>In this tutorial, we will be using Giscus because it is free, open source, and uses GitHub Discussions as a backend. Because a lot of users of Material for MkDocs use GitHub, this seems like an obvious choice.</p> <p>To add Giscuss to your blog you will need to go through a number of steps:</p> <ol> <li>Create a GitHub repository if there is not already one</li> <li>Turn on discussions and install the Giscus app</li> <li>Configure the code needed to embed Giscus into your blog</li> <li>Add the code to your MkDocs project</li> </ol> <p>You may want to create a test repository for this tutorial that you can scrap later on. The instructions below assume that you are user \"example\" and that you create a repository \"giscus-test.\" The repository will need to be public for people to be able to use the discussions.</p> <p>In the instructions given below, you will need to replace at least the username but also the repository name if you chose another name such as when you want to work directly on an existing repository.</p> <p>Turn on discussions and install the Giscus app</p> <p>Once the repository is set up, go to its settings page and find <code>Features</code> in the <code>General</code> section. Tick the checkbox for <code>Discussions</code>. You will see that <code>Discussions</code> appears in the top navigation for the repository. If you are using a live repository then you may want to add some minimal content to the dicussions section at this point and come back to the tutorial.</p> <p>Next, you need to install the Giscus app by following the link in this sentence, and choosing <code>Install</code>, then following the instructions to choose where the Giscus app is to be installed:</p> <ol> <li>Choose the account or organization for the repository you want to use.</li> <li>Choose to install only on select repositories and select the one you    want to use. Note that you can choose more than one repository here.</li> <li>Select <code>Install</code> at the end. You may need to authenticate to give    permission for this to happen.</li> <li>You will end up on the <code>Applications</code> page in your settings, where you    can control the Gicsus app and uninstall it if so desired.</li> </ol> <p>That is all the preparation you will need for the repository. Next, it is time to generate a piece of code that embeds Giscuss in your site. The resulting code snippet will look something like this:</p> <pre><code>&lt;script src=\"https://giscus.app/client.js\"\n        data-repo=\"&lt;username&gt;/&lt;repository&gt;\"\n        data-repo-id=\"...\"\n        data-category=\"Announcements\"\n        data-category-id=\"...\"\n        data-mapping=\"title\"\n        data-strict=\"1\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"1\"\n        data-input-position=\"top\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"en\"\n        data-loading=\"lazy\"\n        crossorigin=\"anonymous\"\n        async&gt;\n&lt;/script&gt;\n</code></pre> <p>Configure the code needed to embed Giscus into your blog</p> <p>Go to the Giscus homepage and configure the embedding code. There are a number of settings:</p> <ol> <li>Choose the language</li> <li>Enter the username / organization name and repository name</li> <li>Choose how the discussions are to be mapped to the page on your blog.    Because for a blog post the title is the basis of the URL, it makes    sense to use the <code>Discussion title contains page &lt;title&gt;</code> option.</li> <li>Under <code>Discussion Category</code> choose <code>Announcements</code> to limit the creation    of new discussions to Giscuss and people with maintainer or admin    permissions.</li> <li>Under <code>Features</code>, select the following:<ol> <li>Enable reactions for the main post</li> <li>Emit discussion metadata</li> <li>Place the comment box above the comments</li> </ol> </li> <li>Under <code>Theme</code>, select <code>Preferred color scheme</code> so that Giscus matches    the color scheme selected by the user for your site.</li> </ol> <p>With these settings in place, you now need to integrate the code into your site. There is a partial <code>partials/comments.html</code> that exists for this purpose and is empty be default. It is included by the <code>content.html</code> partial, so will be included for every page on your site. You may or may not want this. In this tutorial, you will limit the Giscus integration to only blog posts but it is easy enough to leave out the code that achieves this if you want to have Giscus discussions active for every page.</p> <p>Add Giscus integration code</p> <p>First, you need to create an <code>overrides</code> directory that will contain the templates and partials you want to override.</p> <pre><code>mkdir -p overrides/partials\n</code></pre> <p>You need to declare it in your <code>mkdocs.yaml</code>:</p> <pre><code>theme:\n  name: material\n  custom_dir: overrides\n</code></pre> <p>Now add a file <code>overrides/partials/comments.html</code> and paste in the code snippet you obtained from the Giscus homepage. Look at the result locally and you will see that the integration is active on all pages of the site. If you want to restrict it to your blog posts, you need to add a conditional around the Giscus script that tests if comments should be included. A simple way of doing this is to test for a metadata flag:</p> <pre><code>{% if page.meta.comments %}\n&lt;script&gt;...&lt;/script&gt;\n{% endif %}\n</code></pre> <p>The disadvantage is that you now need to manually turn on comments for each blog post - unless you want to turn them off on some. To get the comments section on all blog posts, use code like this:</p> <pre><code>{% if page.file.src_uri.startswith('blog/posts') %}\n&lt;script&gt;...&lt;/script&gt;\n{% endif %}\n</code></pre> <p>You should see now that the Giscus comments are added at the bottom of your blog posts but not on other pages.</p>"},{"location":"tutorials/blogs/engage/#whats-next","title":"What's next?","text":"<p>This is the end of the blog tutorial. We hope you have enjoyed it and manage to set up your blog the way you like it. There are numerous other features and options that we have not been able to cover here. The blog plugin reference provides comprehensive documentation for the plugin. You may also want to look at the social plugin tutorial to generate social cards for your blog posts that get displayed when you post links to social media systems.</p>"},{"location":"tutorials/blogs/navigation/","title":"Navigation, authors, and pagination","text":"<p>The Blog plugin provides blog-style navigation with a reverse-chronological index page and an archive organized by year by default. This tutorial shows how you can configure details of the default navigation, configure authors, and add more navigation options using categories and the Tags plugin.</p> <p>Time required: typically 30 minutes</p>"},{"location":"tutorials/blogs/navigation/#integrating-navigation","title":"Integrating navigation","text":"<p>So far, you have let the Blog plugin and MkDocs worry about navigation. For some use cases, this might be enough and it is simply sufficient to not declare a <code>nav</code> section in the <code>mkdocs.yml</code>.</p> <p>However, you may want to integrate a blog with other content and a navigation structure that you have defined in the <code>nav</code> section of the configuration. In such cases, you need to provide a place where the Blog plugin should attach the blog navigation to the rest of the navigation structure.</p> <p>Integrate with site navigation</p> <p>Add the following to your <code>mkdocs.yml</code> to see how the Blog plugin can integrate the blog navigation with the overall navigation structure. Note that the only thing you need to specify at this point is the index page for the blog and its path must match the <code>blog_dir</code> setting, which is <code>blog</code> by default:</p> <pre><code>nav:\n  - Home: index.md\n  - Install: install.md\n  - Usage: usage.md\n  - Blog:\n     - blog/index.md\n</code></pre> <p>You will notice that \"Blog\" is duplicated in the navigation structure. To avoid this, you can use the <code>navigation.indexes</code> feature to make the blog index the section index page for the blog:</p> <pre><code>theme:\n  name: material\n  features:\n    - navigation.indexes\n</code></pre> <p>Stand-alone blog</p> <p>If what you need is a stand-alone blog instead of one that is integrated with a larger site, this can be done by using the <code>blog_dir</code> configuration option. To see how this is done, see setting up a blog. The rest of the tutorial assumes that you are integrating the blog with a wider site.</p> <p>Adding pages</p> <p>You can add additional pages to the blog section by putting them into <code>docs/blog</code> (and adding them to the navigation). The blog archive will be added to the navigation after these pages.</p>"},{"location":"tutorials/blogs/navigation/#configuring-the-archive","title":"Configuring the archive","text":"<p>By default, the blog archive lists posts by year only. If you want to add listings by month, you can configure the date format for the archive.</p> <p>Organize posts by month</p> <p>Add the following to your <code>mkdocs.yml</code> to get a listing with the month name (in the language selected in the theme options):</p> <pre><code>- blog:\n    archive_date_format: MMMM yyyy\n</code></pre> <p>If you do not want the full month name, you can make the date configuration <code>MM/yyyy</code>, for example.</p> <p>If you want to add the day, you can add a placeholder for them. For example, to get an American-style output, make it <code>MM/dd/yyyy</code>. For the plugin to sort the blog posts by the full date, you will also need to set the <code>archive_url_date_format</code> to include the month and day, so make it <code>MM/dd/yyyy</code> as well.</p>"},{"location":"tutorials/blogs/navigation/#using-categories","title":"Using categories","text":"<p>Categories are a way to make blog posts accessible by topic while retaining the navigation structure based on chronology within each category listing. Use them when there is a limited set of non-overlapping categories that you can sort your posts into.</p> <p>Categories appear in the main navigation, so are directly accessible from there. This implies that there are relatively few categories as otherwise the <code>categories</code> section in your main navigation will become too crowded.</p> <p>Add a category</p> <p>Add a category to your first blog post by adding it to the page header:</p> <pre><code>---\ndate: 2023-12-31\nupdated: 2024-01-02\ncategories:\n  - Holidays\n---\n</code></pre> <p>Now that the blog post has been categorised, <code>Holidays</code> appears under <code>Categories</code> in the main navigation and the blog post appears in the index page for this category.</p> <p>Single or multiple categories?</p> <p>While it is traditionally the case that a blog post would belong to only one category, Material for MkDocs actually allows you to assign more than one. While this gives you a degree of freedom, you should probably not use this too much, not least because you can use tags to deal with multiple classifications. We will cover them in the next step.</p> <p>Material allows you to control which categories blog authors can use. You declare them in the <code>mkdocs.yml</code>. This way you can make sure everyone sticks to agreed categories and that the plugin detects typos.</p> <p>Control your categories</p> <p>Add a <code>categories_allowed</code> entry to the configuration of the Blog plugin with the entries \"Holidays\" and \"News\":</p> <pre><code>plugins:\n  - search\n  - blog:\n      archive_date_format: MMMM yyyy\n      categories_allowed:\n        - Holidays\n        - News\n</code></pre> <p>Now, when you add a category to a blog post that does not match one of these two, you should get a build error.</p>"},{"location":"tutorials/blogs/navigation/#using-tags","title":"Using tags","text":"<p>The Tags plugin provides another way to classify blog posts and to make them accessible independently of the main navigation structure. Tags are useful for making related content easily discoverable even if it is in different parts of the navigation hierarchy.</p> <p>You may have a tutorial like this one as well as a more comprehensive setup guide and reference documentation. Adding the same tag to all three shows that they are related. As you will see, it is possible to navigate from a tagged page to the tag index and, from there, to other pages that carry the same tag.</p> <p>Enable the plugin and add tags</p> <p>First, you need to add the plugin to your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - search\n  - blog:\n      archive_date_format: MMMM yyyy\n      categories_allowed:\n        - Holidays\n        - News\n  - tags\n</code></pre> <p>Once this is done, you can add tags to posts in the page header:</p> <pre><code>---\ndate:\n  created: 2023-12-31\n  updated: 2024-01-02\nauthors:\n  - material\ncategories:\n  - Holidays\ntags:\n  - new year\n  - hogmanay\n  - festive season\n---\n</code></pre> <p>You should see the tags that you defined at the top of the post. However, at the moment that is it. While the blog plugin automatically creates an index page for categories, the tags plugin does not do the same for tags. This is because the tags plugin is not specific for blogs. You can use it for any site content, so it is not obvious were the tag index should go.</p> <p>You can configure a basic tag index using the public version of Material for MkDocs. The Insider Edition supports this as well, of course, but also provides an alternative index mechanism that allows for an arbitrary number of tag indexes, scoped listings, shadow tags, nested tags, and much more.</p> <p>Adding a tags index</p> Basic tag indexInsider Edition <p>To configure a tag index using the public version, add a <code>tags_file</code> entry to your configuration of the tags plugin and configure it in your <code>nav</code> section. Remember to add a colon at the end of the existing <code>tags</code> entry.</p> <pre><code>plugins:\n    - search\n    - blog:\n        archive_date_format: MMMM yyyy\n        categories_allowed:\n            - Holidays\n            - News\n    - tags:\n        tags_file: blog/tags.md\n\nnav:\n    - Home: index.md\n    - Install: install.md\n    - Usage: usage.md\n    - Blog:\n        - blog/index.md\n        - Tags: blog/tags.md\n</code></pre> <p>The tag index will be appended to the configured page, which you should now create at the location specified.</p> <p>Note that you can put the tag index page anywhere in your primary navigation, so if you are using tags elsewhere instead of just in your blog then you may want to have the tag index outside the blog section of the navigation.</p> <p>To add a tag index, you add a placeholder in a Markdown file to tell the plugin to insert an index at that point. This means that you can add content before and after the index. Crucially, you can add placeholders in multiple pages, each with a configuration of what subset of tags should be displayed in the index.</p> <p>The simplest index page looks like this. Create it under <code>docs/tags.md</code>.</p> <pre><code># Tag index\n###### tutorials/blogs/navigation.md:8951-8973/name { #tutorials/blogs/navigation.md:8951-8973/slug }\n</code></pre> <p>Now, you may want to keep the tags for your blog separate from tags you use in the rest of your page. You can achieve this by assigning the tag index a scope. Put the following under <code>docs/blog/tags.md</code>:</p> <pre><code># Tag index  for the blog\n###### tutorials/blogs/navigation.md:9278-9316/name { #tutorials/blogs/navigation.md:9278-9316/slug }\n</code></pre> <p>You now have two index pages: one covers the whole site and one covers only the blog. Add both to the navigation:</p> <pre><code>nav:\n    - Home: index.md\n    - Tags: tags.md\n    - Blog:\n        - blog/index.md\n        - blog/tags.md\n</code></pre> <p>The tags plugin in the Insider Edition is an incredibly powerful tool and we can only scratch the surface of what is possible with it. If you want to explore more after you have worked for this part of the tutorial, have a look at the tags plugin reference.</p>"},{"location":"tutorials/blogs/navigation/#defining-authors","title":"Defining authors","text":"<p>If your blog has more than one author then you may want to identify the author for each blog post. The blog plugin allows you to create a file that contains the author information and to then reference the authors of a particular post in the page header.</p> <p>Create author info</p> <p>Create a file <code>docs/blog/.authors.yml</code> with this content:</p> <pre><code>authors:\n  team:\n    name: Team\n    description: Creator\n    avatar: https://simpleicons.org/icons/materialformkdocs.svg\n  squidfunk:\n    name: Martin Donath\n    description: Creator\n    avatar: https://github.com/squidfunk.png\n</code></pre> <p>and then add a line to the header of the first post:</p> <pre><code>---\ndate:\n  created: 2023-12-31\n  updated: 2024-01-02\nauthors:\n  - team\n---\n</code></pre> <p>Note that <code>authors</code> is a list, so you can specify multiple authors.</p> <p>With the Insiders edition, you can create custom author index pages that can highlight the contributions of an author as well as provide additional information about them.</p> <p>Add author page </p> <p>First, you need to enable author profiles in the <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - search\n  - blog:\n      archive_date_format: MMMM yyyy\n      categories_allowed:\n          - Holidays\n          - News\n      authors_profiles: true\n</code></pre> <p>Check your blog to see that there is now an extra entry in the main navigation next to <code>archive</code> and <code>categories</code> that lists the authors and their contributions.</p> <p>To customize the author page, you can create a page that overrides the one generated by default. First, create the <code>author</code> directory that the profile pages will live in:</p> <pre><code>docs\n\u251c\u2500\u2500 blog\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 author\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 posts\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 draft.md\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 myfirst.md\n\u2514\u2500\u2500 index.md\n</code></pre> <p>Then create a page <code>docs/blog/author/team.md</code>:</p> <pre><code># The Material Team\n\nA small group of people dedicated to making writing documentation easy, if\nnot outright fun! Here are some of the things we have blogged about:\n</code></pre> <p>As you can see, the author index gets appended to the content you have written in the Markdown file.</p>"},{"location":"tutorials/blogs/navigation/#pagination","title":"Pagination","text":"<p>Once your blog starts growing, you may not want to pay attention to the number of posts displayed per page. By default, the plugin displays up to 10 posts on the index pages. You can change this number separately for the main index, the archive index pages, and the category index pages.</p> <p>Changing pagination</p> <p>Add five more blog posts, then set the pagination setting to show five per page only:</p> <pre><code>- blog:\n    archive_date_format: MMMM yyyy\n    categories_allowed:\n        - Holidays\n        - News\n    authors_profiles: true\n    pagination_per_page: 5\n</code></pre> <p>You will see that the pagination setting for archive and category pages are inherited from the setting you added. If you want to have different settings for the different index pages, you can specify each setting separately:</p> <pre><code>- blog:\n    archive_date_format: MMMM yyyy\n    categories_allowed:\n        - Holidays\n        - News\n    authors_profiles: true\n    pagination_per_page: 5\n    archive_pagination_per_page: 10\n    categories_pagination_per_page: 10\n</code></pre>"},{"location":"tutorials/blogs/navigation/#blog-table-of-contents","title":"Blog table of contents","text":"<p>Another thing you may want to do once you have a large enough number of posts is to turn on the function that produces a table of contents for the blog index pages, giving your readers the opportunity to quickly scan the content of each page for something that interests them without having to scroll (assuming that the number of post per page is not too big).</p> <p>Turn on the table of contents feature</p> <p>To produce a table of contents for the blog index pages, add the following to the configuration of the blog plugin:</p> <pre><code>- blog:\n    blog_toc: true\n    archive_date_format: MMMM yyyy\n    # ...\n</code></pre>"},{"location":"tutorials/blogs/navigation/#custom-slugs","title":"Custom slugs","text":"<p>If, for some reason, you are not happy with the way that Material for MkDocs turns headings into slugs, you can create your own slugify function or you can manually define a slug for a specific post.</p> <p>Slugify function</p> <p>To define your own slugify function, you need to write a Python function that converts text into a slug given additional arguments from the configuration. You also need to write a function that returns that function.</p> <p>Say you want to define two slugify functions that you can switch between. The first one returns a slug similar to what the default slugify function produces. The second one cuts the result of that up into words and returns a slug based on a maximum of five of them:</p> <p><pre><code>import re, functools, unicodedata\n\nRE_HTML_TAGS = re.compile(r'&lt;/?[^&gt;]*&gt;', re.UNICODE)\nRE_INVALID_SLUG_CHAR = re.compile(r'[^\\w\\- ]', re.UNICODE)\nRE_WHITESPACE = re.compile(r'\\s', re.UNICODE)\n\ndef _make_slug(text, sep, **kwargs):\n    slug = unicodedata.normalize('NFC', text)\n    slug = RE_HTML_TAGS.sub('', slug)\n    slug = RE_INVALID_SLUG_CHAR.sub('', slug)\n    slug = slug.strip().lower()\n    slug = RE_WHITESPACE.sub(sep, slug)\n    return slug\n\ndef _make_slug_short(text, sep, **kwargs):\n    words = _make_slug(text, sep, **kwargs).split(sep)\n    return sep.join(words[:5])\n\ndef slugify(**kwargs):\n    if 'short' in kwargs and kwargs['short']:\n        return functools.partial(_make_slug_short, **kwargs)\n    return functools.partial(_make_slug, **kwargs)\n</code></pre> Save this code in <code>ext/slugs.py</code> and also add an (empty) <code>__init__.py</code> file to indicate that the directory is a module. Now you can configure your custom slugify code like this:</p> <pre><code>plugins:\n- blog:\n    # other entries omitted\n    post_slugify: !!python/object/apply:ext.slugs.slugify\n      kwds:\n        short: true\n</code></pre> <p>Change the heading of a blog post to be longer than five words and observe how the slugify function shortens the URL. Change the <code>short</code> attribute to <code>false</code> and you can turn this off again.</p> <p>If you want to influence the slug only for a single blog post, you can define it manually by specifying it in the header of the post. Note that this is meant as a last resort option. Specifying a custom slug manually for every post would be tedious.</p> <p>Manually define slug</p> <p>If, for example, you wanted the slug to be 'ny-eve'  instead of the somewhat lengthy 'happy-new-years-eve', you could add the following:</p> <pre><code>---\ndate:\n  created: 2023-12-31\n  updated: 2024-01-02\nreadtime: 15\npin: true\nslug: ny-eve\n---\n</code></pre> <p>The URL for this post should now be <code>http://localhost:8000/blog/2023/01/31/ny-eve/</code>.</p>"},{"location":"tutorials/blogs/navigation/#whats-next","title":"What's next?","text":"<p>You may want to increase engagement with your blog by allowing people to subscribe to an RSS feed, by providing links to your social media profiles, by providing share and like buttons, or by setting up a comment system. The engagement and dissemination tutorial walks you through setting these up.</p>"},{"location":"tutorials/social/basic/","title":"Basic social cards","text":"<p>Social cards are images that other systems such as social media can display as a preview for content linked to. It is easy to get started with the social plugin, true to the motto of Material with MkDocs: \"batteries included.\"</p>"},{"location":"tutorials/social/basic/#basics","title":"Basics","text":"<p>Before you start, there are just a couple of dependencies to install. These are libraries for image processing that the plugin needs to produce the social cards, as well as their Python bindings.</p> <p>With those prerequisites met, it is simply a matter of activating the plugin, which will:</p> <ul> <li>produce the social cards as PNG images for each page in your site;</li> <li>create meta data in the headers of your site's pages that will provide   social media systems with key information and tell them how to find the   social card image.</li> </ul> <p>Add social cards</p> <p>Simply add the social plugin to your list of plugins:</p> <pre><code>    plugins:\n        - search\n        - social\n        - ...\n</code></pre> <p>Now, when you run <code>mkdocs build</code> and look at the <code>site</code> directory, you will see that it contains subfolders under <code>assets/images/social</code> that reflect the structure of your Markdown files. Each page has a corresponding PNG file that contains the social card image.</p> <p>Have a look at the generated HTML and you will see the metadata produced in the <code>head</code> element, including one entry that points to the image.</p>"},{"location":"tutorials/social/basic/#background-color","title":"Background color","text":"<p>The social plugin has configuration options for changing aspects such as colors, images, fonts, logos, the title, even the description. You can configure them for all social cards in the <code>mkdocs.yml</code> and, in the Insiders Edition, they can be overridden in the page header for individual pages.</p> <p>Change the background color</p> <p>To change the background color to an attention-grabbing hot pink, you might add:</p> <pre><code>plugins:\n...\n- social:\n    cards_layout_options:\n        background_color: \"#ff1493\"\n</code></pre>"},{"location":"tutorials/social/basic/#logos","title":"Logos","text":"<p>By default, the plugin uses the logo that you set for the whole site, either through the <code>theme.logo</code> or the <code>theme.icon.logo</code> setting. The difference between the two is that the <code>theme.icon.logo</code> version will directly embed the logo's SVG code into the HTML, allowing it to inherit CSS color settings. When you use <code>theme.logo</code>, the Material includes the logo as an image.</p> <p>You can set your own logo specific for the social cards as well. The path used is relative to your project root and needs to point to an SVG file or a pixel image. It should be rectangular and have a transparent background.</p> <p>Set your own logo</p> <pre><code>plugins:\n- social:\n    cards_layout_options:\n      logo: docs/assets/images/ourlogo.png\n</code></pre>"},{"location":"tutorials/social/basic/#background-images","title":"Background images","text":"<p>In addition to adding your own logo, the most impactful way to personalize your social cards is to add a background image instead of the default solid color background. Make sure you choose one that will contrast well with the other elements of the card.</p> <p>Also, the background color gets rendered on top of the background image, allowing you to use a transparent color to tint an image. To use just the image, use the color value <code>transparent</code>.</p> <p>Add background image</p> <pre><code>plugins:\n- social:\n    cards_layout_options:\n      background_image: layouts/background.png\n      background_color: transparent\n</code></pre> <p>The path to the background image is resolved from the root of your project, so this is where you should make the <code>layouts</code> directory and place the background image. The default site of the social cards included with the plugin is 1200x630 pixels, so choose an image that size or one that scales well to it.</p>"},{"location":"tutorials/social/basic/#additional-layouts-and-styles","title":"Additional layouts and styles","text":"<p>The Insiders Edition provides additional layouts as well as the option to configure different styles for different (kinds of) pages.</p> <p>The Insiders Edition comes with a number of additional layouts for the social cards. For example, the <code>default/variant</code> layout adds a page icon to the card. You can use this to distinguish social cards visually, depending on what kind of page you are sharing.</p> <p>For example, imagine you have a set of pages that advertise events and you want to include a calendar icon as a visual indication that a card advertises an event. In the following, you will set up a directory for event pages and use the meta plugin to assign them a calendar icon.</p> <p>Social cards for event pages</p> <p>First, create a directory in your <code>docs</code> directory to hold the event pages:</p> <pre><code>$ mkdir docs/events\n</code></pre> <p>Then, add a file <code>.meta.yml</code> inside this new directory with settings for the page icon and a hot pink background color that will stand out on social media. Note that you can override the background image by setting it to <code>null</code> here since it is not visible anyway because of the opaque coloring.</p> <pre><code>---\nicon: material/calendar-plus\nsocial:\n  cards_layout_options:\n    background_image: null\n    background_color: \"#ff1493\"\n---\n</code></pre> <p>Now add a page within the <code>docs/events</code> directoy. It does not need to have any special content, just a top level header.</p> <p>To turn on the <code>default/variant</code> layout in <code>mkdocs.yml</code>, add the <code>cards_layout</code> option and also add the meta plugin:</p> <pre><code>plugins:\n  - meta\n  - social:\n      cards_layout: default/variant\n</code></pre> <p>After running <code>mkdocs build</code>, you can see that the social card at <code>site/assets/images/social/events/index.png</code> features the page icon.</p> <p>Note that the icon will also appear next to the navigation element for the page. If that is not what you want then you will need to modify the social card template to gets its icons from another source. You can learn how to do this in the custom social cards tutorial.</p>"},{"location":"tutorials/social/basic/#per-page-settings","title":"Per-page settings","text":"<p>With the Insiders Edition, you can customize the card layout for each page by adding settings to the page header. You have effectively done this in the previous exercise, but using the meta plugin to affect a whole set of pages.</p> <p>Say that in addition to regular events you also have the odd webinar and for this you want to set a different icon and also set the description to indicate that the event is part of the webinar series.</p> <p>Override card style in page header</p> <p>Add the following to the top of the page in <code>docs/events</code> or create a new one:</p> <pre><code>---\nicon: material/web\nsocial:\n  cards_layout_options:\n    description: Our Webinar Series\n---\n</code></pre>"},{"location":"tutorials/social/basic/#whats-next","title":"What's next?","text":"<p>With the Insiders Edition, you can also define custom layouts if the configuration options introduced above as not enough to meet your needs. Continue to the custom social cards tutorial if you want to find out how to do this.</p> <p>Social cards are particularly useful for blog posts. If you have a blog, you need to do nothing more than to turn on both plugins to create social cards to advertise your latest blog posts. If you do not have one yet but would like to, why not check out the blog tutorials?</p>"},{"location":"tutorials/social/custom/","title":"Custom cards","text":"<p>The Insiders Edition allows you to define custom layouts for your social cards to suit your specific needs if the configuration options are not enough. For example, you may want to define a social card to advertise a new release of your product. It should have an icon indicating a launch announcement as well as the version number of the release on the card.</p>"},{"location":"tutorials/social/custom/#setup","title":"Setup","text":"<p>You can either design a custom layout from scratch or use an existing layout as the basis that you add to or otherwise modify. In this tutorial, you will use the default layout as the basis.</p> <p>Copy default layout to customize </p> <p>Copy the default social card layout from your installation of Material for MkDocs to a new directory <code>layouts</code>. The instructions below assume you are in your project root and have a virtual environment within this. The path on your machine, of course, may differ.</p> <pre><code>$ mkdir layouts\n$ cp venv/lib/python3.12/site-packages/material/plugins/social/templates/default/variant.yml \\\n  layouts/release.yml\n</code></pre> <p>Before customizing the social cards, you need to tell the plugin where to find them as well as tell MkDocs to watch for any changes. Add the following to the plugin configuration in your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - social:\n      cards_layout_dir: layouts\n\nwatch:\n  - layouts\n</code></pre> <p>Have a look at the contents of <code>release.yml</code>. You will see that there are:</p> <ul> <li>a number of definitions of content pulled from the site,</li> <li>definitions of tags that end up in the <code>meta</code> elements in the page header   of each page,</li> <li>a specification that consists of a number of layers that the social plugin   applies on top of each other in the order in which they are defined.</li> </ul>"},{"location":"tutorials/social/custom/#define-page-metadata","title":"Define page metadata","text":"<p>In the following, you will add a version number to the social card. This assumes you have a changelog page with information about each release. Add the version number of the latest version to the page header (so it does not need to be parsed out of the Markdown content):</p> <p>Defining the release data </p> <p>Create a page <code>docs/changelog.md</code> with the following content:</p> <pre><code>---\nicon: material/rocket-launch-outline\nsocial:\n  cards_layout: release\n  cards_layout_options:\n    title: New release!\nlatest: 1.2.3\n---\n\n# Releases\n</code></pre>"},{"location":"tutorials/social/custom/#extract-page-metadata","title":"Extract page metadata","text":"<p>With the data defined in the page header, you can now add code to the layout that pulls it out and makes it available to render later on. This is to separate the data manipulation from the actual layout instructions and so make the layout file easier to read.</p> <p>Adding data definitions</p> <p>Add the following at the top of the layout file:</p> <pre><code>definitions:\n  - &amp;latest &gt;-\n    {%- if 'latest' in page.meta %}\n        {{ page.meta['latest']}}\n    {%- else -%}\n        No release version data defined!\n    {%- endif -%}\n</code></pre> <p>The code presented here checks whether the page header contains the necessary entries and spits out a message to the social card if not. Unfortunately, there is no straightforward way to raise an exception or log an error, so the messages merely appear in the social card produced.</p>"},{"location":"tutorials/social/custom/#add-release-version-layer","title":"Add release version layer","text":"<p>The next step is to use these data definitions in a new layer and add it to the ones already present.</p> <p>Render release version</p> <p>Finally, add the following to end of the custom layout:</p> <pre><code>  - size: { width: 990, height: 50 }\n    offset: { x: 50, y: 360 }\n    typography:\n      content: *latest\n      align: start\n      color: *color\n</code></pre> <p>You should now see the social plugin use the custom layout on the changelog page you set up.</p>"},{"location":"tutorials/social/custom/#adjust-layout","title":"Adjust layout","text":"<p>Finally, the rocket icon used for the changelog page is not quite in the right position. Find the please where the <code>page_icon</code> variable is used to create the page icon layer and adjust the horizontal position to 600 instead of 800.</p> <p>Debugging layout files</p> <p>Should you find that your layouts are causing your MkDocs build to fail, there are a number of things you can do:</p> <ol> <li>Run Mkdocs with the <code>--verbose</code> option to get more detailed reporting.</li> <li>Comment out things you recently added or that you suspect are the cause</li> <li>Install the <code>jinja2</code> command-line tool with <code>pip install Jinja2</code> and    run it over your layout file, for example: <code>jinja2 event.yml</code>.</li> </ol>"},{"location":"tutorials/social/custom/#whats-next","title":"What's next?","text":"<p>If you do not have a blog yet, why not check out the blog tutorials and learn how to set one up? The social plugin will help you draw attention to your posts on social media.</p> <p>Check out the other tutorials we have prepared for you.</p>"},{"location":"authors/","title":"Our Amazing Authors","text":""},{"location":"authors/#wang-kewen","title":"Wang Kewen","text":"<p>Free and casual</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2021/","title":"2021","text":""},{"location":"blog/category/hexo/","title":"Hexo","text":""},{"location":"blog/category/%E4%B8%AD%E6%96%87%E5%88%86%E7%B1%BB1/","title":"\u4e2d\u6587\u5206\u7c7b1","text":""},{"location":"blog/category/%E4%B8%AD%E6%96%87%E5%88%86%E7%B1%BB2/","title":"\u4e2d\u6587\u5206\u7c7b2","text":""},{"location":"blog/category/hello-world/","title":"Hello World","text":""}]}